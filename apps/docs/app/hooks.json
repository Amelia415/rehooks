[
  {
    "id": 0,
    "title": "useClipboard",
    "description": "A hook that provides a function to copy text to the clipboard.",
    "content": "import { useState, useEffect } from 'react';\n\n/**\n * React hook to copy a given text to the user's clipboard.\n *\n * @param {number} [timeout=1500] Time in milliseconds to show the \"copied\"\n * success state after a successful copy action.\n *\n * @returns {object} An object with two properties:\n * - `isCopied`: A boolean indicating whether the text was successfully copied\n *   to the user's clipboard.\n * - `copy`: A function that takes a string argument and attempts to copy it to\n *   the user's clipboard. If the copy action is successful, it sets the\n *   `isCopied` state to `true`.\n */\nexport function useClipboard(timeout = 1500) {\n  const [isCopied, setIsCopied] = useState(false);\n\n  useEffect(() => {\n    let timer;\n\n    if (isCopied) {\n      timer = setTimeout(() => {\n        setIsCopied(false);\n      }, timeout);\n    }\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [isCopied, timeout]);\n\n  /**\n   * Attempts to copy the given text to the user's clipboard.\n   *\n   * If the copy action is successful, it sets the `isCopied` state to `true`.\n   * If the copy action fails, it logs an error to the console and\n   * displays a native alert with the message \"Failed to copy text\".\n   *\n   * If the browser does not support the Clipboard API, it displays a\n   * native alert with the message \"Copy not supported\".\n   *\n   * @param {string} text The text to copy to the user's clipboard.\n   */\n  const copy = (text) => {\n    if (navigator.clipboard && window.isSecureContext) {\n      navigator.clipboard\n        .writeText(text)\n        .then(() => {\n          setIsCopied(true);\n        })\n        .catch((err) => {\n          console.error(\"Failed to copy: \", err);\n          alert(\"Failed to copy text\");\n        });\n    } else {\n      alert(\"Copy not supported\");\n    }\n  };\n\n  return { isCopied, copy };\n}"
  },
  {
    "id": 1,
    "title": "useCountdown",
    "description": "Custom hook that implements a countdown functionality.",
    "content": "import { useCallback, useState, useEffect } from \"react\";\n\ntype CountdownOptions = {\n  countStart: number;\n  intervalMs?: number;\n  countStop?: number;\n};\n\ntype CountdownControllers = {\n  startCountdown: () => void;\n  stopCountdown: () => void;\n  resetCountdown: () => void;\n};\n\nexport function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n}: CountdownOptions): [number, CountdownControllers] {\n  const [count, setCount] = useState(countStart);\n  const [isRunning, setIsRunning] = useState(false);\n  const [timer, setTimer] = useState<ReturnType<typeof setInterval> | null>(null);\n\n  const startCountdown = useCallback(() => {\n    if (!isRunning) {\n      setIsRunning(true);\n    }\n  }, [isRunning]);\n\n  const stopCountdown = useCallback(() => {\n    if (timer) {\n      clearInterval(timer);\n      setTimer(null);\n    }\n    setIsRunning(false);\n  }, [timer]);\n\n  const resetCountdown = useCallback(() => {\n    stopCountdown();\n    setCount(countStart);\n  }, [stopCountdown, countStart]);\n\n  useEffect(() => {\n    if (isRunning) {\n      setTimer(\n        setInterval(() => {\n          setCount((prevCount) => {\n            if (prevCount <= countStop) {\n              stopCountdown();\n              return countStop;\n            }\n            return prevCount - 1;\n          });\n        }, intervalMs),\n      );\n    }\n\n    return () => {\n      if (timer) {\n        clearInterval(timer);\n      }\n    };\n  }, [isRunning, intervalMs, countStop, stopCountdown]);\n\n  return [count, { startCountdown, stopCountdown, resetCountdown }];\n}\n"
  },
  {
    "id": 2,
    "title": "useCounter",
    "description": "Hook that returns a tuple containing increment, decrement, reset functions, and the current value of the counter.",
    "content": "import { useCallback, useState, type SetStateAction, type Dispatch } from 'react';\n\ntype CounterReturnType = {\n  increment: () => void;\n  decrement: () => void;\n  reset: () => void;\n  count: number;\n  setCount: Dispatch<SetStateAction<number>>;\n};\n\n/**\n * Hook that returns a tuple containing the following:\n * - `increment`: A function that increments the counter by 1.\n * - `decrement`: A function that decrements the counter by 1.\n * - `reset`: A function that sets the counter to 0.\n * - `count`: The current value of the counter.\n * - `setCount`: A state setter function that sets the counter to the given\n *   value.\n *\n * The hook takes an optional `initialValue` parameter which sets the initial\n * value of the counter. If not provided, the counter is initialized to 0.\n *\n * @param {number} [initialValue] Optional initial value of the counter.\n * @returns {CounterReturnType}\n */\nexport function useCounter(initialValue?: number): CounterReturnType {\n  const [count, setCount] = useState(initialValue ?? 0);\n\n  const increment = useCallback(() => setCount((x) => x + 1), []);\n  const decrement = useCallback(() => setCount((x) => x - 1), []);\n  const reset = useCallback(() => {\n    setCount(initialValue ?? 0);\n  }, [initialValue]);\n\n  return {\n    increment,\n    decrement,\n    reset,\n    count,\n    setCount,\n  };\n}"
  },
  {
    "id": 3,
    "title": "useDebounceCallback",
    "description": "Custom hook that debounces a callback function, executing it after the specified delay.",
    "content": "import { useCallback, useEffect, useRef } from \"react\";\n\nexport function useDebounceCallback<T extends (...args: any[]) => void>(\n  callback: T,\n  delay: number,\n): (...args: Parameters<T>) => void {\n  const timer = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  const debouncedCallback = useCallback(\n    (...args: Parameters<T>) => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n\n      timer.current = setTimeout(() => {\n        callback(...args);\n      }, delay);\n    },\n    [callback, delay],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, []);\n\n  return debouncedCallback;\n}\n"
  },
  {
    "id": 4,
    "title": "useDebounceValue",
    "description": "Custom hook that debounces a value, returning the value after the specified delay.",
    "content": "import { useEffect, useState } from \"react\";\n\nexport function useDebounceValue<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n"
  },
  {
    "id": 5,
    "title": "useEventCallback",
    "description": "A hook that returns a memoized version of a callback that is stable between renders.",
    "content": "import { useRef, useEffect, useCallback } from \"react\";\n\nexport function useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref = useRef<T>(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  }, [fn]);\n\n  return useCallback(((...args) => ref.current(...args)) as T, []);\n}\n"
  },
  {
    "id": 6,
    "title": "useEventListener",
    "description": "A custom hook to add and clean up an event listener on any target element.",
    "content": "import { useEffect, useRef, type RefObject } from \"react\";\n\nexport function useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n  element?: RefObject<HTMLElement> | Window,\n): void {\n  const savedHandler = useRef<(event: WindowEventMap[K]) => void>(handler);\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const targetElement: HTMLElement | Window =\n      element && \"current\" in element ? element.current! : window;\n\n    if (!targetElement) return;\n\n    const eventListener: EventListener = (event) =>\n      savedHandler.current(event as WindowEventMap[K]);\n\n    targetElement.addEventListener(eventName, eventListener);\n\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n}\n"
  },
  {
    "id": 7,
    "title": "useFocus",
    "description": "A custom hook to track whether an element is focused.",
    "content": "import { useEffect, useRef, useState, type RefObject } from \"react\";\n\ntype UseFocusCallback = (isFocused: boolean) => void;\n\nexport function useFocus<T extends HTMLElement>(\n  callback?: UseFocusCallback,\n): [RefObject<T>, boolean] {\n  const [isFocused, setIsFocused] = useState(false);\n  const ref = useRef<T>(null);\n\n  useEffect(() => {\n    const handleFocus = () => {\n      setIsFocused(true);\n      callback?.(true);\n    };\n    const handleBlur = () => {\n      setIsFocused(false);\n      callback?.(false);\n    };\n\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(\"focus\", handleFocus);\n      node.addEventListener(\"blur\", handleBlur);\n    }\n\n    return () => {\n      if (node) {\n        node.removeEventListener(\"focus\", handleFocus);\n        node.removeEventListener(\"blur\", handleBlur);\n      }\n    };\n  }, [callback]);\n\n  return [ref, isFocused];\n}\n"
  },
  {
    "id": 8,
    "title": "useHover",
    "description": "A custom hook to track whether an element is hovered.",
    "content": "import { useState, useRef } from \"react\";\nimport { useEventListener } from \"./useEventListener\";\n\nexport function useHover<T extends HTMLElement>(): [\n  React.RefObject<T>,\n  boolean,\n] {\n  const [isHovered, setIsHovered] = useState(false);\n  const ref = useRef<T>(null);\n\n  const handleMouseEnter = () => setIsHovered(true);\n  const handleMouseLeave = () => setIsHovered(false);\n\n  useEventListener(\"mouseenter\", handleMouseEnter, ref);\n  useEventListener(\"mouseleave\", handleMouseLeave, ref);\n\n  return [ref, isHovered];\n}\n"
  },
  {
    "id": 9,
    "title": "useKeyPress",
    "description": "Custom hook to detect if a specified key is pressed.",
    "content": "import { useState, useEffect } from \"react\";\n\ninterface KeyConfig {\n  key: string;\n  ctrl?: boolean;\n  alt?: boolean;\n  shift?: boolean;\n}\n\nexport function useKeyPress(config: KeyConfig): boolean {\n  const [keyPressed, setKeyPressed] = useState(false);\n  const { key: targetKey, ctrl, alt, shift } = config;\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    const { key, ctrlKey, altKey, shiftKey } = e;\n\n    if (\n      (!ctrl && !alt && !shift && key === targetKey) ||\n      (ctrl && key === targetKey && ctrlKey === ctrl) ||\n      (alt && key === targetKey && altKey === alt) ||\n      (shift && key === targetKey && shiftKey === shift)\n    ) {\n      setKeyPressed(true);\n    }\n  };\n\n  const handleKeyUp = (e: KeyboardEvent) => {\n    const { key, ctrlKey, altKey, shiftKey } = e;\n\n    if (\n      (!ctrl && !alt && !shift && key === targetKey) ||\n      (ctrl && key === targetKey && ctrlKey === ctrl) ||\n      (alt && key === targetKey && altKey === alt) ||\n      (shift && key === targetKey && shiftKey === shift)\n    ) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n\n  return keyPressed;\n}\n"
  },
  {
    "id": 10,
    "title": "useLocalStorage",
    "description": "Custom hook that manages a state variable with local storage.",
    "content": "import { useState, useEffect } from \"react\";\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, (value: T) => void] {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading local storage key \\\"${key}\\\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting local storage key \\\"${key}\\\":`, error);\n    }\n  };\n\n  useEffect(() => {\n    const handleStorageChange = (event: StorageEvent) => {\n      if (event.key === key) {\n        setStoredValue(\n          event.newValue ? JSON.parse(event.newValue) : initialValue,\n        );\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, [key, initialValue]);\n\n  return [storedValue, setValue];\n}\n"
  },
  {
    "id": 11,
    "title": "useOnlineStatus",
    "description": "Custom hook that returns the current online/offline status of the browser.",
    "content": "import { useState, useEffect } from \"react\";\n\nexport function useOnlineStatus(\n  callback?: (isOnline: boolean) => void,\n): boolean {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      if (callback) callback(true);\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      if (callback) callback(false);\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, [callback]);\n\n  return isOnline;\n}\n"
  },
  {
    "id": 12,
    "title": "useScroll",
    "description": "A custom hook that tracks whether the horizontal scroll position exceeds a given threshold.",
    "content": "import { useCallback, useEffect, useState } from \"react\";\n\nexport function useScroll(threshold: number): boolean {\n  const [scrolled, setScrolled] = useState(false);\n\n  const onScroll = useCallback(() => {\n    setScrolled(window.scrollY > threshold);\n  }, [threshold]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", onScroll);\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [onScroll]);\n\n  return scrolled;\n}\n"
  },
  {
    "id": 13,
    "title": "useSessionStorage",
    "description": "Custom hook that manages a state variable with session storage.",
    "content": "import { useState, useEffect } from \"react\";\n\nexport function useSessionStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, (value: T) => void] {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.sessionStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading session storage key \\\"${key}\\\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.sessionStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting session storage key \\\"${key}\\\":`, error);\n    }\n  };\n\n  useEffect(() => {\n    const handleStorageChange = (event: StorageEvent) => {\n      if (event.key === key) {\n        setStoredValue(\n          event.newValue ? JSON.parse(event.newValue) : initialValue,\n        );\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, [key, initialValue]);\n\n  return [storedValue, setValue];\n}\n"
  },
  {
    "id": 14,
    "title": "useToggle",
    "description": "Returns a stateful value and two functions to update it.",
    "content": "import { useCallback, useState } from \"react\";\n\nimport type { Dispatch, SetStateAction } from \"react\";\n\nexport function useToggle(\n  defaultValue?: boolean,\n): [boolean, () => void, Dispatch<SetStateAction<boolean>>] {\n  const [value, setValue] = useState(!!defaultValue);\n\n  const toggle = useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return [value, toggle, setValue];\n}\n"
  }
]